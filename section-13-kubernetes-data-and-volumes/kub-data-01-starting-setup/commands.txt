Levantamos un contenedor con un server (node) que expondra dos apis:
    > GET, que leera los datos guardados en un archivo text.txt
    > POST, que guardara texto en un archivo text.txt

El DOCKER-COMPOSE creara:
    > Un CONTAINER para el server
    > Un VOLUME para persistir la data que se guarde en el archivo text.txt
    > Expondra un PUERTO 3000 en el CONTAINER y un PUERTO 80 en nuestra MAQUINA-LOCAL

Creamos el CONTENEDOR y el VOLUME a partir el COMPOSE FILE
> docker-compose up -d --build
> Desde POSTMAN ejecutamos:
    > GET 
        > localhost://story
    > POST 
        > localhost://story
        > body: {"text": "fisrt line from client"}

Borramos el contenedor y comprobamos que la data persiste:
> docker-compose down
> docker container prune ==> borrar todos los containers

VOlvermos a levantar un nuevo contenedor y ejecutamos un get:
> docker-compose up -d --build
> Desde POSTMAN ejecutamos:
    > GET 
        > localhost://story ==> la data seguira estando persistente, porque creamos un VOLUME

Eliminados el contendor y vemos como todo esto se traslada a kubernetes:
> docker-compose down

Es importante saber que los VOLUMES enkubernetes son parte de cada POD y depende de la vida del POD. Si el POD es borrado, el VOLUME sera borrado tambien.
Levantamos minikube para comenzar con kubernetes:
> minikube start --driver=docker
> minikube status
> kubectl get deployments ==> para verificar que no tennemos deployments 

Usamos el enfoque DECLARATIVE para crear un nuevo DEPLOYMENT y SERVICE:
> deployment.yaml

    apiVersion: app/v1
    kind: Deployment
    metadata:
        name: story-deployment
    spec:
        replicas: 1
        selector:
            matchLabels:
                app: story
        template:
            metadata:
                labels: 
                    app: story
            spec:
                containers:
                    - name: story
                    image: yamil189/kub-data-demo # ==> necesitamos crear un repositorio nuevo en DokerHub y subir la nueva imagen a ese repo

> service.yaml

    apiVersion: v1
    kind: Service
    metadata:
        name: story-service
    spec:
        selector: 
            app: story
        type: LoadBalancer 
        ports:
            - protocol: 'TCP'
            port: 80
            targetPort: 3000

> Desde Dokerhub, creamos un nuevo repo "kub-data-demo"
> En nuestro local, creamos la nueva imagen:
    > docker build -t yamil189/kub-data-demo .
> Pusheamos la imagen a dockerhub:
    > docker push yamil189/kub-data-demo

Creamos el POD declarativamente:
> kubectl apply -f=deployment.yaml
> kubectl get deployments
> kubectl get pods

Creamos el SERVICE declarativamente:
> kubectl apply -f=service.yaml
> kubectl get services

> minikube service story-service ==> exponer la URL el servicio para usarlo, nos da una URL ("http://127.0.0.1:42695" por ejemplo) para acceder al POD
> Ir a postman y consultar a las APIs del POD:
    > GET
        > URL (que nos dio el comando "minikube service story-service") /story ==> "http://127.0.0.1:42695/story"
    > POST
        > URL (que nos dio el comando "minikube service story-service") /story ==> "http://127.0.0.1:42695/story"
        > BODY: {"text": "fisrt line from client"}

Creamos un VOLUME con kubernetes:
Como los VOLUMES estan dentro del POD, hay que definirlo en el DEPLOYMENT FILE dentro de la seccion de la especificacion del POD.
> deployment.yaml

    apiVersion: app/v1
    kind: Deployment
    metadata:
        name: story-deployment
    spec:
        replicas: 1
        selector:
            matchLabels:
                app: story
        template:
            metadata:
                labels: 
                    app: story
            spec:
                containers:
                    - name: story
                    image: yamil189/kub-data-demo # ==> necesitamos crear un repositorio nuevo en DokerHub y subir la nueva imagen a ese repo
                          volumeMounts:
                    - mountPath: /app/story
                    name: story-volume
                volumes:
                    - name: story-volume
                    emptyDir: {}

En el server file "app.js", agregamos una nueva ruta para forzar el reinicio del POD al crashearlo:
> app.js
    app.get('/error', () => {
        process.exit(1) //Crashea y container y fuerza el reinicio
    })

> Recreamos la nueva imagen (agregamos "v1" como TAG):
    > docker build -t yamil189/kub-data-demo:v1 .
> Pusheamos la imagen a dockerhub:
    > docker push yamil189/kub-data-demo:v1 
> En el DEPLOYMENT-FILE actualizamos el nombre de la imagen con el nuevo TAG (v1):
          ....
          containers:
            - name: story
              image: yamil189/kub-data-demo:v1
          ....
> Aplicamos la nueva configuracion:
    > kubectl apply -f=deployment.yaml
> kubectl get pods
